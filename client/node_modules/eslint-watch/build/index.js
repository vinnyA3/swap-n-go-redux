'use strict';

var _keypress = require('keypress');

var _keypress2 = _interopRequireDefault(_keypress);

var _settings = require('./settings');

var _settings2 = _interopRequireDefault(_settings);

var _cli = require('./eslint/cli');

var _cli2 = _interopRequireDefault(_cli);

var _options = require('./options');

var _options2 = _interopRequireDefault(_options);

var _watcher = require('./watcher');

var _watcher2 = _interopRequireDefault(_watcher);

var _argParser = require('./arg-parser');

var _argParser2 = _interopRequireDefault(_argParser);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _package = require('../package');

var _package2 = _interopRequireDefault(_package);

var _clearTerminal = require('./formatters/helpers/clear-terminal.js');

var _clearTerminal2 = _interopRequireDefault(_clearTerminal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = (0, _logger2.default)('esw-cli'); /* eslint no-process-exit: 0*/


logger.debug('Loaded');
logger.debug(`Eslint-Watch: ${_package2.default.version}`);

var exitCode = void 0;
var args = process.argv;

function runLint(args, options) {
  logger.debug(args);
  var result = (0, _cli2.default)(args, options);
  logger.debug('lint completed. Exit Code: %o', result.exitCode);
  exitCode = result.exitCode;
  logger.log(result.message);
}

function keyListener(args, options) {
  var stdin = process.stdin;
  if (!stdin.setRawMode) {
    logger.debug('Process might be wrapped exiting keybinding');
    return;
  }
  (0, _keypress2.default)(stdin);
  stdin.on('keypress', function keyPressListener(ch, key) {
    logger.debug('%s was pressed', key ? key.name : ch);
    if (key && key.name === 'return') {
      logger.debug('relinting...');
      logger.debug(options);
      runLint(args, options);
    }
    if (key && key.ctrl && key.name === 'c') {
      process.exit();
    }
  });
  stdin.setRawMode(true);
  stdin.resume();
}

logger.debug('Arguments passed: %o', args);
var parsedOptions = _options2.default.parse(args);
_settings2.default.cliOptions = parsedOptions;

if (parsedOptions.eswVersion) {
  logger.log(_package2.default.version);
} else {
  logger.debug('Parsing args');
  var eslArgs = _argParser2.default.parse(args, parsedOptions);
  if (!parsedOptions.help) {
    logger.debug('Running initial lint');
    if (parsedOptions.clear) {
      (0, _clearTerminal2.default)();
    }
    runLint(eslArgs, parsedOptions);
    if (parsedOptions.watch) {
      logger.debug('-w seen');
      keyListener(eslArgs, parsedOptions);
      (0, _watcher2.default)(parsedOptions);
    }
  } else {
    logger.log(_options2.default.generateHelp());
  }
}

process.on('exit', function () {
  logger.debug(`Exiting: ${exitCode}`);
  process.exit(exitCode);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJsb2dnZXIiLCJkZWJ1ZyIsInZlcnNpb24iLCJleGl0Q29kZSIsImFyZ3MiLCJwcm9jZXNzIiwiYXJndiIsInJ1bkxpbnQiLCJvcHRpb25zIiwicmVzdWx0IiwibG9nIiwibWVzc2FnZSIsImtleUxpc3RlbmVyIiwic3RkaW4iLCJzZXRSYXdNb2RlIiwib24iLCJrZXlQcmVzc0xpc3RlbmVyIiwiY2giLCJrZXkiLCJuYW1lIiwiY3RybCIsImV4aXQiLCJyZXN1bWUiLCJwYXJzZWRPcHRpb25zIiwicGFyc2UiLCJjbGlPcHRpb25zIiwiZXN3VmVyc2lvbiIsImVzbEFyZ3MiLCJoZWxwIiwiY2xlYXIiLCJ3YXRjaCIsImdlbmVyYXRlSGVscCJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLFNBQVMsc0JBQU8sU0FBUCxDQUFmLEMsQ0FaQTs7O0FBY0FBLE9BQU9DLEtBQVAsQ0FBYSxRQUFiO0FBQ0FELE9BQU9DLEtBQVAsQ0FBYyxpQkFBZ0Isa0JBQUlDLE9BQVEsRUFBMUM7O0FBRUEsSUFBSUMsaUJBQUo7QUFDQSxJQUFNQyxPQUFPQyxRQUFRQyxJQUFyQjs7QUFFQSxTQUFTQyxPQUFULENBQWlCSCxJQUFqQixFQUF1QkksT0FBdkIsRUFBK0I7QUFDN0JSLFNBQU9DLEtBQVAsQ0FBYUcsSUFBYjtBQUNBLE1BQU1LLFNBQVMsbUJBQVVMLElBQVYsRUFBZ0JJLE9BQWhCLENBQWY7QUFDQVIsU0FBT0MsS0FBUCxDQUFhLCtCQUFiLEVBQThDUSxPQUFPTixRQUFyRDtBQUNBQSxhQUFXTSxPQUFPTixRQUFsQjtBQUNBSCxTQUFPVSxHQUFQLENBQVdELE9BQU9FLE9BQWxCO0FBQ0Q7O0FBRUQsU0FBU0MsV0FBVCxDQUFxQlIsSUFBckIsRUFBMkJJLE9BQTNCLEVBQW1DO0FBQ2pDLE1BQUlLLFFBQVFSLFFBQVFRLEtBQXBCO0FBQ0EsTUFBRyxDQUFDQSxNQUFNQyxVQUFWLEVBQXFCO0FBQ25CZCxXQUFPQyxLQUFQLENBQWEsNkNBQWI7QUFDQTtBQUNEO0FBQ0QsMEJBQVNZLEtBQVQ7QUFDQUEsUUFBTUUsRUFBTixDQUFTLFVBQVQsRUFBcUIsU0FBU0MsZ0JBQVQsQ0FBMEJDLEVBQTFCLEVBQThCQyxHQUE5QixFQUFrQztBQUNyRGxCLFdBQU9DLEtBQVAsQ0FBYSxnQkFBYixFQUErQmlCLE1BQU1BLElBQUlDLElBQVYsR0FBaUJGLEVBQWhEO0FBQ0EsUUFBR0MsT0FBT0EsSUFBSUMsSUFBSixLQUFhLFFBQXZCLEVBQWdDO0FBQzlCbkIsYUFBT0MsS0FBUCxDQUFhLGNBQWI7QUFDQUQsYUFBT0MsS0FBUCxDQUFhTyxPQUFiO0FBQ0FELGNBQVFILElBQVIsRUFBY0ksT0FBZDtBQUNEO0FBQ0QsUUFBR1UsT0FBT0EsSUFBSUUsSUFBWCxJQUFtQkYsSUFBSUMsSUFBSixLQUFhLEdBQW5DLEVBQXdDO0FBQ3RDZCxjQUFRZ0IsSUFBUjtBQUNEO0FBQ0YsR0FWRDtBQVdBUixRQUFNQyxVQUFOLENBQWlCLElBQWpCO0FBQ0FELFFBQU1TLE1BQU47QUFDRDs7QUFFRHRCLE9BQU9DLEtBQVAsQ0FBYSxzQkFBYixFQUFxQ0csSUFBckM7QUFDQSxJQUFNbUIsZ0JBQWdCLGtCQUFZQyxLQUFaLENBQWtCcEIsSUFBbEIsQ0FBdEI7QUFDQSxtQkFBU3FCLFVBQVQsR0FBc0JGLGFBQXRCOztBQUVBLElBQUdBLGNBQWNHLFVBQWpCLEVBQTRCO0FBQzFCMUIsU0FBT1UsR0FBUCxDQUFXLGtCQUFJUixPQUFmO0FBQ0QsQ0FGRCxNQUVPO0FBQ0xGLFNBQU9DLEtBQVAsQ0FBYSxjQUFiO0FBQ0EsTUFBTTBCLFVBQVUsb0JBQVVILEtBQVYsQ0FBZ0JwQixJQUFoQixFQUFzQm1CLGFBQXRCLENBQWhCO0FBQ0EsTUFBSSxDQUFDQSxjQUFjSyxJQUFuQixFQUF5QjtBQUN2QjVCLFdBQU9DLEtBQVAsQ0FBYSxzQkFBYjtBQUNBLFFBQUlzQixjQUFjTSxLQUFsQixFQUF5QjtBQUN2QjtBQUNEO0FBQ0R0QixZQUFRb0IsT0FBUixFQUFpQkosYUFBakI7QUFDQSxRQUFJQSxjQUFjTyxLQUFsQixFQUF5QjtBQUN2QjlCLGFBQU9DLEtBQVAsQ0FBYSxTQUFiO0FBQ0FXLGtCQUFZZSxPQUFaLEVBQXFCSixhQUFyQjtBQUNBLDZCQUFRQSxhQUFSO0FBQ0Q7QUFDRixHQVhELE1BV087QUFDTHZCLFdBQU9VLEdBQVAsQ0FBVyxrQkFBWXFCLFlBQVosRUFBWDtBQUNEO0FBQ0Y7O0FBR0QxQixRQUFRVSxFQUFSLENBQVcsTUFBWCxFQUFtQixZQUFNO0FBQ3ZCZixTQUFPQyxLQUFQLENBQWMsWUFBV0UsUUFBUyxFQUFsQztBQUNBRSxVQUFRZ0IsSUFBUixDQUFhbEIsUUFBYjtBQUNELENBSEQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tcHJvY2Vzcy1leGl0OiAwKi9cbmltcG9ydCBrZXlwcmVzcyBmcm9tICdrZXlwcmVzcyc7XG5cbmltcG9ydCBzZXR0aW5ncyBmcm9tICcuL3NldHRpbmdzJztcbmltcG9ydCBlc2xpbnRDbGkgZnJvbSAnLi9lc2xpbnQvY2xpJztcbmltcG9ydCBoZWxwT3B0aW9ucyBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHdhdGNoZXIgZnJvbSAnLi93YXRjaGVyJztcbmltcG9ydCBhcmdQYXJzZXIgZnJvbSAnLi9hcmctcGFyc2VyJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHBrZyBmcm9tICcuLi9wYWNrYWdlJztcbmltcG9ydCBjbGVhclRlcm1pbmFsIGZyb20gJy4vZm9ybWF0dGVycy9oZWxwZXJzL2NsZWFyLXRlcm1pbmFsLmpzJztcblxuY29uc3QgbG9nZ2VyID0gTG9nZ2VyKCdlc3ctY2xpJyk7XG5cbmxvZ2dlci5kZWJ1ZygnTG9hZGVkJyk7XG5sb2dnZXIuZGVidWcoYEVzbGludC1XYXRjaDogJHtwa2cudmVyc2lvbn1gKTtcblxubGV0IGV4aXRDb2RlO1xuY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndjtcblxuZnVuY3Rpb24gcnVuTGludChhcmdzLCBvcHRpb25zKXtcbiAgbG9nZ2VyLmRlYnVnKGFyZ3MpO1xuICBjb25zdCByZXN1bHQgPSBlc2xpbnRDbGkoYXJncywgb3B0aW9ucyk7XG4gIGxvZ2dlci5kZWJ1ZygnbGludCBjb21wbGV0ZWQuIEV4aXQgQ29kZTogJW8nLCByZXN1bHQuZXhpdENvZGUpO1xuICBleGl0Q29kZSA9IHJlc3VsdC5leGl0Q29kZTtcbiAgbG9nZ2VyLmxvZyhyZXN1bHQubWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIGtleUxpc3RlbmVyKGFyZ3MsIG9wdGlvbnMpe1xuICBsZXQgc3RkaW4gPSBwcm9jZXNzLnN0ZGluO1xuICBpZighc3RkaW4uc2V0UmF3TW9kZSl7XG4gICAgbG9nZ2VyLmRlYnVnKCdQcm9jZXNzIG1pZ2h0IGJlIHdyYXBwZWQgZXhpdGluZyBrZXliaW5kaW5nJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGtleXByZXNzKHN0ZGluKTtcbiAgc3RkaW4ub24oJ2tleXByZXNzJywgZnVuY3Rpb24ga2V5UHJlc3NMaXN0ZW5lcihjaCwga2V5KXtcbiAgICBsb2dnZXIuZGVidWcoJyVzIHdhcyBwcmVzc2VkJywga2V5ID8ga2V5Lm5hbWUgOiBjaCk7XG4gICAgaWYoa2V5ICYmIGtleS5uYW1lID09PSAncmV0dXJuJyl7XG4gICAgICBsb2dnZXIuZGVidWcoJ3JlbGludGluZy4uLicpO1xuICAgICAgbG9nZ2VyLmRlYnVnKG9wdGlvbnMpO1xuICAgICAgcnVuTGludChhcmdzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgaWYoa2V5ICYmIGtleS5jdHJsICYmIGtleS5uYW1lID09PSAnYycpIHtcbiAgICAgIHByb2Nlc3MuZXhpdCgpO1xuICAgIH1cbiAgfSk7XG4gIHN0ZGluLnNldFJhd01vZGUodHJ1ZSk7XG4gIHN0ZGluLnJlc3VtZSgpO1xufVxuXG5sb2dnZXIuZGVidWcoJ0FyZ3VtZW50cyBwYXNzZWQ6ICVvJywgYXJncyk7XG5jb25zdCBwYXJzZWRPcHRpb25zID0gaGVscE9wdGlvbnMucGFyc2UoYXJncyk7XG5zZXR0aW5ncy5jbGlPcHRpb25zID0gcGFyc2VkT3B0aW9ucztcblxuaWYocGFyc2VkT3B0aW9ucy5lc3dWZXJzaW9uKXtcbiAgbG9nZ2VyLmxvZyhwa2cudmVyc2lvbik7XG59IGVsc2Uge1xuICBsb2dnZXIuZGVidWcoJ1BhcnNpbmcgYXJncycpO1xuICBjb25zdCBlc2xBcmdzID0gYXJnUGFyc2VyLnBhcnNlKGFyZ3MsIHBhcnNlZE9wdGlvbnMpO1xuICBpZiAoIXBhcnNlZE9wdGlvbnMuaGVscCkge1xuICAgIGxvZ2dlci5kZWJ1ZygnUnVubmluZyBpbml0aWFsIGxpbnQnKTtcbiAgICBpZiAocGFyc2VkT3B0aW9ucy5jbGVhcikge1xuICAgICAgY2xlYXJUZXJtaW5hbCgpO1xuICAgIH1cbiAgICBydW5MaW50KGVzbEFyZ3MsIHBhcnNlZE9wdGlvbnMpO1xuICAgIGlmIChwYXJzZWRPcHRpb25zLndhdGNoKSB7XG4gICAgICBsb2dnZXIuZGVidWcoJy13IHNlZW4nKTtcbiAgICAgIGtleUxpc3RlbmVyKGVzbEFyZ3MsIHBhcnNlZE9wdGlvbnMpO1xuICAgICAgd2F0Y2hlcihwYXJzZWRPcHRpb25zKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbG9nZ2VyLmxvZyhoZWxwT3B0aW9ucy5nZW5lcmF0ZUhlbHAoKSk7XG4gIH1cbn1cblxuXG5wcm9jZXNzLm9uKCdleGl0JywgKCkgPT4ge1xuICBsb2dnZXIuZGVidWcoYEV4aXRpbmc6ICR7ZXhpdENvZGV9YCk7XG4gIHByb2Nlc3MuZXhpdChleGl0Q29kZSk7XG59KTtcbiJdfQ==